// simulate sequences with actual nucleotides

initialize() {
    defineConstant("L", 50000);
    initializeSLiMOptions(nucleotideBased=T);
    initializeAncestralNucleotides( randomNucleotides(L) );
    initializeMutationTypeNuc("m1", 0.5, "f", 0.0);
    initializeMutationTypeNuc("m2", var_h, "f", var_s);
    initializeMutationTypeNuc("m3", var_h, "f", var_s);
    initializeMutationTypeNuc("m4", var_h, "f", var_s);
    initializeMutationTypeNuc("m5", var_h, "f", var_s);
    // initializeMutationRate(2.5e-6);
    initializeGenomicElementType("g1", m1, 1.0, mmJukesCantor(8.3e-7)); //  (2.5/3~=0.83)e-8 scaled by 100
    initializeGenomicElement(g1, 0, L-1);
    initializeRecombinationRate(1e-6); // 1e-8 scaled by 100
}
1 {
    defineConstant("simID2",getSeed()); // get seed in case of re-run
    sim.addSubpop("p1", 100); // 1e4 scaled by 100
}

// end of burn-in, 8mya gorilla split off
4500 late(){ 
    sim.addSubpopSplit("p2",100,p1);
}


// 5mya chimpanzees split off
6000 late(){
    sim.addSubpopSplit("p3",100,p1) ;
}

1000:8500 late(){
    if ( sim.generation == var_age ){
        cat( '// Introduce the selected mutation at '+ var_age + ' gen.\n\n');
        // save the state of the simulation
        sim.outputFull("/gpfs/scratch/xzc5154/slimTemp/slimH_L20_h" + var_h + "_s"+ var_s + "_gen"+ var_age +"_temp" + simID2 + ".txt");
        target = sample(p1.genomes, 4);
        Nuc1 = target[0].nucleotides(start=25000,end=25000);
        Nuc2 = target[1].nucleotides(start=25000,end=25000);
        Nuc3 = target[2].nucleotides(start=25000,end=25000);
        Nuc4 = target[3].nucleotides(start=25000,end=25000);
        cat('// The nucleotide at the center is '+ Nuc1 +' in first seq, '+Nuc2+' in second, '+Nuc3+' in third, and '+Nuc4+' in fourth.\n');
        aNuc=c();
        for(n in c("A","T","C","G")){
            if(n != Nuc1 & n != Nuc2 & n != Nuc3& n != Nuc4){
                aNuc = c(aNuc,n);
            }
        }
        target[0].addNewDrawnMutation(m2,25000,nucleotide=aNuc[0]);
        Nuc5 = target[0].nucleotides(start=25000,end=25000);
        cat('// The first mutation introduced: ' + Nuc5 +'.\n');
        bNuc = c();
        for(n in aNuc){
            if( n != Nuc5 ){
                bNuc = c(bNuc, n);
            }
        }
        target[1].addNewDrawnMutation(m3,25000,nucleotide=bNuc[0]);
        Nuc6 = target[1].nucleotides(start=25000,end=25000);
        cat('// The second mutation introduced: ' + Nuc6 +'.\n');
        cNuc = c();
        for(n in bNuc){
            if( n != Nuc6 ){
                cNuc = c(cNuc, n);
            }
        }
        target[2].addNewDrawnMutation(m4,25000,nucleotide=cNuc[0]);
        Nuc7 = target[2].nucleotides(start=25000,end=25000);
        cat('// The third mutation introduced: ' + Nuc7 +'.\n');
        dNuc = c();
        for(n in c("A","T","C","G")){
            if(n != Nuc7 & n != Nuc6 & n != Nuc5){
                dNuc = c(dNuc,n);
            }
        }
        target[3].addNewDrawnMutation(m5,25000,nucleotide=dNuc[0]);
        Nuc8 = target[3].nucleotides(start=25000,end=25000);
        cat('// The fourth mutation introduced: ' + Nuc8 +'.\n\n');
    }

    if (sim.generation > var_age){
        if (sim.countOfMutationsOfType(m2) == 0 | sim.countOfMutationsOfType(m3) == 0 | sim.countOfMutationsOfType(m4) == 0 | sim.countOfMutationsOfType(m5) == 0){
            sim.outputMutations(sim.mutationsOfType(m2));
            sim.outputMutations(sim.mutationsOfType(m3));
            sim.outputMutations(sim.mutationsOfType(m4));
            sim.outputMutations(sim.mutationsOfType(m5));
            sim.readFromPopulationFile("/gpfs/scratch/xzc5154/slimTemp/slimH_L20_h" + var_h + "_s"+ var_s + "_gen"+ var_age +"_temp" + simID2 + ".txt");
            // start a newly seeded run by incrementing the previous seed
            setSeed(getSeed() + 1);
            cat("Mutation lost. Restarting simulation with seed "+ getSeed() +"\n");
            target = sample(p1.genomes, 4);
            Nuc1 = target[0].nucleotides(start=25000,end=25000);
            Nuc2 = target[1].nucleotides(start=25000,end=25000);
            Nuc3 = target[2].nucleotides(start=25000,end=25000);
            Nuc4 = target[3].nucleotides(start=25000,end=25000);
            cat('// The nucleotide at the center is '+ Nuc1 +' in first seq, '+Nuc2+' in second, '+Nuc3+' in third, and '+Nuc4+' in fourth.\n');
            aNuc=c();
            for(n in c("A","T","C","G")){
                if(n != Nuc1 & n != Nuc2 & n != Nuc3& n != Nuc4){
                    aNuc = c(aNuc,n);
                }
            }
            target[0].addNewDrawnMutation(m2,25000,nucleotide=aNuc);
            Nuc5 = target[0].nucleotides(start=25000,end=25000);
            cat('// The first mutation introduced: ' + Nuc5 +'.\n');
            bNuc = c();
            for(n in aNuc){
                if( n != Nuc5 ){
                    bNuc = c(bNuc, n);
                }
            }
            target[1].addNewDrawnMutation(m3,25000,nucleotide=bNuc);
            Nuc6 = target[1].nucleotides(start=25000,end=25000);
            cat('// The second mutation introduced: ' + Nuc6 +'.\n');
            cNuc = c();
            for(n in bNuc){
                if( n != Nuc6 ){
                    cNuc = c(cNuc, n);
                }
            }
            target[2].addNewDrawnMutation(m4,25000,nucleotide=cNuc);
            Nuc7 = target[2].nucleotides(start=25000,end=25000);
            cat('// The third mutation introduced: ' + Nuc7 +'.\n');
            dNuc = c();
            for(n in c("A","T","C","G")){
                if(n != Nuc7 & n != Nuc6 & n != Nuc5){
                    dNuc = c(dNuc,n);
                }
            }
            target[3].addNewDrawnMutation(m5,25000,nucleotide=dNuc);
            Nuc8 = target[3].nucleotides(start=25000,end=25000);
            cat('// The fourth mutation introduced: ' + Nuc8 +'.\n\n');
        }
    }
}

// sample
8500 late() {
    sam = p1.sampleIndividuals(25).genomes ; // human
    sam = c(sam, p3.sampleIndividuals(25).genomes ) ; // chimp
    sam = c(sam, p2.sampleIndividuals(1).genomes ) ; // gorilla
    sim.outputMutations(sim.mutationsOfType(m2));
    sim.outputMutations(sim.mutationsOfType(m3));
    sim.outputMutations(sim.mutationsOfType(m4));
    sim.outputMutations(sim.mutationsOfType(m5));
    cat(asString('\n// output population samples\n'));
    sam.outputVCF(simplifyNucleotides=F);
}
